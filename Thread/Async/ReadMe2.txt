Рекомендации по async\await (https://habr.com/ru/company/otus/blog/488082/)
----------------------------------------
Когда следует использовать Async/Await:
----------------------------------------
Работа, связанная с вводом/выводом: 
   Ваш код будет ожидать чего-то, например, данных из базы данных, чтения файла, вызова веб-службы. 
   В этом случае вы должны использовать Async/Await, а не Task Parallel Library.
Работа, связанная с процессором: ваш код будет выполнять сложные вычисления. 
   В этом случае вы должны использовать Async/Await, но запустить работу нужно в другом потоке 
   с помощью Task.Run. Вы также можете рассмотреть возможность использования Task Parallel Library.

----------------------------------------
Если метод объявлен как async, убедитесь, что есть await!
----------------------------------------

----------------------------------------
Избегайте async void
----------------------------------------
public async void AsyncVoidMethod()
{
    //Плохо!
}

public async Task AsyncTaskMethod()
{
    //Хорошо!
}
---- Исключения, сгенерированные в async void методе, не могут быть перехвачены вне этого метода
---- Методы async void могут вызывать нежелательные побочные эффекты, если вызывающая сторона не ожидает, 
     что они будут асинхронными: если ваш асинхронный метод ничего не возвращает, используйте 
     async Task (без «<T>» для Task) в качестве возвращаемого типа.
---- Async void методы очень сложно тестировать

----------------------------------------
Предпочитайте return Task вместо return await
----------------------------------------

Не оборачивайте return Task внутри блоков try..catch{} или using{}

Избегайте использования .Wait() или .Result — используйте вместо этого GetAwaiter().GetResult()

Если метод асинхронный, добавьте суффикс Async к его имени

Методам асинхронной библиотеки стоит использовать Task.ConfigureAwait(false) для повышения производительности

Если вам нужно подождать некоторое время (например, повторить попытку проверки доступности ресурса), 
обязательно используйте Task.Delay — никогда не используйте Thread.Sleep в этом сценарии.

Используйте Task.WaitAny, чтобы дождаться завершения любой задачи. 
Используйте Task.WaitAll, чтобы дождаться завершения всех задач.