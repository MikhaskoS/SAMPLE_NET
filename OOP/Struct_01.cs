using System;
using System.Collections.Generic;
using System.Text;

namespace OOP
{
    /*В объявлении структуры поля не могут быть инициализированы до тех пор, 
     * пока они будут объявлены как const или static.
     
        Структура не может объявлять конструктор без параметров или метод завершения.
        
        Структуры копируются при присваивании. При присваивании структуры к 
        новой переменной выполняется копирование всех данных, а любое изменение 
        новой копии не влияет на данные в исходной копии. Это важно помнить при 
        работе с коллекциями типов значений, такими как Dictionary<string, myStruct>.
        
        Структуры являются типами значений, а классы — ссылочными типами.
        В отличие от классов структуры можно создавать без использования оператора new.
        
        Структуры могут объявлять конструкторы, имеющие параметры.
        
        Структура не может наследовать от другой структуры или класса и не может 
        быть базовой для класса. Все структуры наследуют непосредственно от ValueType, 
        который наследует от Object.
        
        Структуры могут реализовывать интерфейсы.
        
        Структура не может быть null, а переменная структуры не может быть назначена null, 
        если переменная не объявлена как тип, допускающий значение NULL.
        
         
         Советы:
         В структуре делать все readonly (не делать изменяемых структур)
         */

    public struct Vector2
    {
        public float x, y;
        private float _id;

        public float Id { get => _id; set => _id = value; }

        public Vector2(float p1, float p2)
        {
            x = p1;
            y = p2;
            _id = 0;
        }

       

        public float Lenght()
        {
            return x * x + y * y;
        }
    }
}
