Проектирование типов.

В этом разделе будут рассмотрены элементы объектно-ориентированного программирования:
наследование, инкапсуляция, полиморфизм


1.

------------------------------------------------------------------------------------------------------
Модификаторы доступа к члену
------------------------------------------------------------------------------------------------------
private    |  Доступен только методам в определяющем типе и вложенных в него типах.
           |
protected  |  Доступен только методам в определяющем типе (и вложенных в него типах) 
           |  или одном из его производных типов независимо от сборки.
           |
internal   |  Доступен только методам в определяющей сборке.
           |
protected  |  Доступен только методам вложенного типа, производного типа (независимо от сборки)
internal   |  и любым методам определяющей сборки.
           |
public     |  Доступен всем методам во всех сборках
-------------------------------------------------------------------------------------------------------

2.

--------------------------------------------------------------------------------------------------------
Управление версиями
-------------------------------------------------------------------------------------------------------
Ключевое   |  Тип                     Метод/Свойство/Событие                         Кностанта/Поле 
слово      |
-------------------------------------------------------------------------------------------------------
abstract   |  Экземпляры            Член необходимо переопределить  
           |  такого типа           и реализовать в производном классе. Только         (запрещено)
           |  создавать нельзя      после этого можно создавать экземпляры
           |                        проиводного типа 
           |-------------------------------------------------------------------------------------------
virtual    |      (запрещено)       Член можно переопределить в производном типе       (запрещено)
           |-------------------------------------------------------------------------------------------
override   |      (запрещено)       Член переопределяется в производном типе           (запрещено)
           |-------------------------------------------------------------------------------------------
           |  Тип нельзя            Член нельзя переопределить в производном типе.
sealed     |  использовать в        Это ключевое слово применяется только к методу,    (запрещено)
           |  качестве базового     переопределяющему виртуальный метод
           |-------------------------------------------------------------------------------------------
new        | применительно к вложенному типу, методу, свойству, событию, константе или полю
           | означает, что член никак не связан с похожим членом, который моожет существовать
           | в базовом классе
-------------------------------------------------------------------------------------------------------

3.

Статический класс (static class)
- Это прямой потомок System.Object. Создать экземпляр статического класса невозможно.
- Не должен реализовывать никаких интерфейсов.
- В классе возможны только статические члены (поля, методы, свойства и события)
- Класс нельзя использовать в качестве поля, параметра метода или локальной переменной.
- Следствие: статический класс может содержать только статический конструктор.

4.

Статический конструктор.
- любой класс (структура) может иметь только один статический конструктор.
- статический конструктор выполняется только один раз, независимо от того,
  сколько создается объектов данного типа.
- Не может иметь модификаторов доступа и параметров.
- Среда выполнения вызывает стат. конструктор, когда создается экземпляр класса, или
  перед тем, как получить доступ к первому вызываемому статическому члену.
- Он выполняется до выполнения любого конструктора уровня экземпляра.

5.

Константы и поля
Константы (const) считаются частью типа. Другими словами, константы считаются статическими,
а не экземплярными членами. Ввиду этого, запись static const считается некорректной.
-------------------------------------------------------------------------------------------------------
Модификаторы полей.
-------------------------------------------------------------------------------------------------------
static      |  Поле является частью состояния типа, а не объекта
            |
(default)   |  Поле связано с экземпляром типа, а не самим типом
            |
readonly    |  Запись в поле допускается только из кода метода конструктора
            |
volatile    |  Код, обращающийся к полю, не обязательно специально должен оптимизироваться в отношении
            |  управления типами компилятором, CLR, или оборудованием (не все типы можно определить
            |  c этим модификатором)
-------------------------------------------------------------------------------------------------------



Советы:
1. Если метод определен как невиртуальный, не рекомендуется в дальнейшем делать его виртуальным.
(Это из-за особенностей компилятора - см. Д.Рихтер - Гл. 6)

2. Рекомендуется по-умолчанию делать классы изолированными (ключевым словом sealed). Так как:
   - его впоследствии всегда можно сделать неизолированным (обратное не всегда невозможно)
   - повышается производительность (виртуальные методы могут вызываться невиртуально)
   - это делает класс более безопасным и предсказуемым

